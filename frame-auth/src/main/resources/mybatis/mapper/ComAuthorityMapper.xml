<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cloud.frame.frameauth.dao.IComAuthorityDao">
    <resultMap id="BaseResultMap" type="com.cloud.frame.authclient.entity.ComAuthority">
        <id column="auth_id" jdbcType="BIGINT" property="authId" />
        <result column="auth_name" jdbcType="VARCHAR" property="authName" />
        <result column="permit_urls" jdbcType="VARCHAR" property="permitUrls" />
        <result column="forbid_urls" jdbcType="VARCHAR" property="forbidUrls" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="is_enable" jdbcType="TINYINT" property="isEnable" />
    </resultMap>

    <sql id="Base_Column_List">
        auth_id,auth_name,permit_urls,forbid_urls,create_time,is_enable
    </sql>

    <sql id="Base_Object_List">
        #{at.authId},#{at.authName},#{at.permitUrls},#{at.forbidUrls},#{at.createTime},#{at.isEnable}
    </sql>

    <sql id="Set_Not_Null_List">
        <set>
            <if test="ut.authId != null">
                auth_id = #{ut.authId},
            </if>
            <if test="ut.authName != null">
                auth_name = #{ut.authName},
            </if>
            <if test="ut.permitUrls != null">
                permit_urls = #{ut.permitUrls},
            </if>
            <if test="ut.forbidUrls != null">
                forbid_urls = #{ut.forbidUrls},
            </if>
            <if test="ut.createTime != null">
                create_time = #{ut.createTime},
            </if>
            <if test="ut.isEnable != null">
                is_enable = #{ut.isEnable}
            </if>
        </set>
    </sql>

    <sql id="Set_With_Null_List">
        <set>
            auth_id = #{ut.authId},
            auth_name = #{ut.authName},
            permit_urls = #{ut.permitUrls},
            forbid_urls = #{ut.forbidUrls},
            create_time = #{ut.createTime},
            is_enable = #{ut.isEnable}
        </set>
    </sql>

    <sql id="For_Each_Condition">
        <foreach collection="conditGroup.conditions" item="condit">
            <choose>
                <when test="condit.noValue">
                ${condit.condition}
                </when>
                <when test="condit.oneValue">
                ${condit.condition} #{condit.value1}
                </when>
                <when test="condit.secondValue">
                ${condit.condition} #{condit.value1} and #{condit.value2}
                </when>
                <when test="condit.listValue">
                ${condit.condition}
                    <foreach collection="condit.list" item="listItem" open="(" close=")" separator=",">
                    #{listItem}
                    </foreach>
                </when>
            </choose>
        </foreach>
    </sql>

    <sql id="where_sql">
        <if test="st.authId != null">
            AND auth_id = #{st.authId}
        </if>
        <if test="st.authName != null">
            AND auth_name = #{st.authName}
        </if>
        <if test="st.permitUrls != null">
            AND permit_urls = #{st.permitUrls}
        </if>
        <if test="st.forbidUrls != null">
            AND forbid_urls = #{st.forbidUrls}
        </if>
        <if test="st.createTime != null">
            AND create_time = #{st.createTime}
        </if>
        <if test="st.isEnable != null">
            AND is_enable = #{st.isEnable}
        </if>
        <if test="st.conditGroups != null">
            <foreach collection="st.conditGroups" item="conditGroup" separator=" ">
                <if test="conditGroup.valid">
                    ${conditGroup.opt}
                    <choose>
                        <when test="conditGroup.conditions.size() > 1">
                            <trim prefix="(" prefixOverrides="and|or" suffix=")">
                                <include refid="For_Each_Condition" />
                            </trim>
                        </when>
                        <otherwise>
                            <trim prefixOverrides="and|or">
                                <include refid="For_Each_Condition" />
                            </trim>
                        </otherwise>
                    </choose>
                </if>
            </foreach>
        </if>
    </sql>

    <!--获取最大的主键-->
    <select id="selectMaxId" resultType="java.lang.Long">
        select IFNULL(max(auth_id), 0) from `com_authority`
    </select>

    <!--根据主键获取对象-->
    <select id="selectById" resultMap="BaseResultMap">
        select <include refid="Base_Column_List" /> from com_authority
        <where>
            AND auth_id = #{authId}
        </where>
    </select>

    <!--查询列表-->
    <select id="selectList" resultMap="BaseResultMap">
        select <include refid="Base_Column_List" /> from com_authority
        <where>
            <include refid="where_sql" />
        </where>
        <if test="st.orderByList!=null and st.orderByList.size() > 0">
            order by
            <foreach collection="st.orderByList" item="order" separator=",">
                ${order.field} ${order.mode}
            </foreach>
        </if>
        <if test="st.index != null and st.pageSize != null and st.pageSize > 0" >
            limit #{st.index},#{st.pageSize}
        </if>
    </select>

    <!--查询列表-->
    <select id="selectFieldList" resultMap="BaseResultMap">
        select
        <foreach collection="fl" item="field" separator=",">
            ${field}
        </foreach>
        from com_authority
        <where>
            <include refid="where_sql" />
        </where>
        <if test="st.orderByList!=null and st.orderByList.size() > 0">
            order by
            <foreach collection="st.orderByList" item="order" separator=",">
            ${order.field} ${order.mode}
            </foreach>
        </if>
        <if test="st.index != null and st.pageSize != null and st.pageSize > 0" >
            limit #{st.index},#{st.pageSize}
        </if>
    </select>

    <!--查询列表总数-->
    <select id="selectCount" resultType="java.lang.Long">
        select count(1) from com_authority
        <where>
            <include refid="where_sql" />
        </where>
    </select>

    <!--根据ID列表获取记录列表-->
    <select id="selectBatchIds" resultMap="BaseResultMap">
        select <include refid="Base_Column_List" /> from com_authority
        <where>
        auth_id in
            <foreach collection="list" open="(" close=")" separator="," item="item">
            #{item}
            </foreach>
        </where>
    </select>

    <!--插入对象-->
    <insert id="add">
        insert into com_authority(<include refid="Base_Column_List" />)
        values(<include refid="Base_Object_List" />)
    </insert>

    <!--批量插入对象-->
    <insert id="addBatch">
        insert into com_authority(<include refid="Base_Column_List" />)
        values
        <foreach collection="list" index="index" item="at" separator=",">
            (<include refid="Base_Object_List" />)
        </foreach>
    </insert>

    <!--更新对象-->
    <update id="updateNotNull">
        update com_authority
        <include refid="Set_Not_Null_List" />
        <where>
            AND auth_id = #{ut.authId}
        </where>
    </update>

    <!--批量更新对象-->
    <update id="updateBatchNotNull">
        <foreach collection="list" separator=";" item="ut">
            update com_authority
            <include refid="Set_Not_Null_List" />
            <where>
                AND auth_id = #{ut.authId}
            </where>
        </foreach>
    </update>

    <!--更新对象(全更新)-->
    <update id="updateWithNull">
        update com_authority
        <include refid="Set_With_Null_List" />
        <where>
            AND auth_id = #{ut.authId}
        </where>
    </update>

    <!--批量更新对象(全更新)-->
    <update id="updateBatchWithNull">
        <foreach collection="list" separator=";" item="ut">
            update com_authority
            <include refid="Set_With_Null_List" />
            <where>
                AND auth_id = #{ut.authId}
            </where>
        </foreach>
    </update>

    <!--更新对象,根据查询条件更新-->
    <update id="updateByMap">
        update com_authority
        <set>
            <foreach collection="um" index="key" item="value" separator=",">
                ${key} = #{value}
            </foreach>
        </set>
        <where>
            <include refid="where_sql" />
        </where>
    </update>

    <!--根据查询条件删除记录-->
    <delete id="delete">
        delete from com_authority
        <where>
            <include refid="where_sql" />
        </where>
    </delete>

    <!--根据主键删除对象-->
    <delete id="deleteById">
        delete from com_authority
        <where>
            AND auth_id = #{authId}
        </where>
    </delete>

    <!-- 批量删除对象 -->
    <delete id="deleteBatchIds">
        delete from com_authority
        <where>
            auth_id in
            <foreach collection="list" open="(" close=")" separator="," item="item">
                #{item}
            </foreach>
        </where>
    </delete>


    <!--~~~~~~~~~~~~~~~~~~~~~~ custom code begin ~~~~~~~~~~~~~~~~~~~~~~-->
        
    <!--~~~~~~~~~~~~~~~~~~~~~~ custom code end ~~~~~~~~~~~~~~~~~~~~~~-->

</mapper>